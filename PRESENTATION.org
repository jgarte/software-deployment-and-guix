#+title: The Software Deployment Problem and Guix
#+startup align

* Have you ever written software that needs to work on another system?

** If so:

   You have most likely encountered the software deployment problem!

** You will need to ensure:

   - Dependencies are in place

   - It's built for the right target architecture

   - It contains no references to invalid paths

   - Et cetera!

** Some Examples

   1. Missing dependencies
      #+begin_example
      Suppose you write a bash script for your coworker to automate
      diffing images with ImageMagick.

      You send it to your coworker and they run it only for the script
      to die immediately.

      You forgot they don't have ImageMagick installed!
      #+end_example

   2. Managing shared mutable dependencies
      #+begin_example
      Not to suggest apt is nothing other than perfect, but imagine
      that a bug in apt was introduced where:

      You install nodejs which in depends on python3.

      You then install git which also depends on python3.

      You recursively remove the git dependency which removes the
      python3 dependency.

      You then try to rebuild nodejs and it dies because where is
      python3?
      #+end_example

      #+begin_example
      glibc had an update which changed a behavior or something.

      You have an old program looking in the same include/lib path as
      the old glibc.

      The program is now subtly busted.
      #+end_example

* What are paths though anyways?

  - Note on terminology. The following are overloaded and sometimes
    used interchangeably both here and in nix and in guix.

    + package - a guix installable artifact
    + derivation - a description of an installable artifact
    + component - a "unit of deployment" in the nix literature
    + artifact - a "unit of deployment" in when I talk about it

** Paths are to files what pointers are to memory addresses

   "Functional package management" begins by "equating" file
   system and memory.

*** The following comes from Eelco Dolstra's Phd Thesis.

    [[https://nixos.org/~eelco/pubs/phd-thesis.pdf][Eelco Dolstra - The Purely Functional Software Deployment Model]]

    - Note the use of "Component" which is used to mean some
      deployable artifact

   #+begin_quote

   | Programming Language                                              | Domain Deployment                       |
   |-------------------------------------------------------------------+-----------------------------------------|
   | Domain Concepts                                                   |                                         |
   |-------------------------------------------------------------------+-----------------------------------------|
   | memory                                                            | disk objects                            |
   | (values)                                                          | components                              |
   | addresses                                                         | path names                              |
   | pointer dereference                                               | I/O                                     |
   | pointer arithmetic                                                | string operations                       |
   | dangling pointer                                                  | reference to absent component           |
   | object graph                                                      | dependency graph                        |
   |-------------------------------------------------------------------+-----------------------------------------|
   | Kinds of dependencies                                             |                                         |
   |-------------------------------------------------------------------+-----------------------------------------|
   | calling already constructed object with reference to other object | runtime dependency through late binding |
   | calling constructor with reference to other object, not stored    | build-time dependency                   |
   | calling constructor with reference to other object, stored        | retained dependency                     |

   ...
   #+end_quote

** Dependencies:

   The closure environment of an artifact

** A "Functional package manager":

   A program that manages the "heap" of the file system

* The heap

  A directory that contains build artifacts and "other stuff" related
  to managing artifacts.

** In Guix this lives in /gnu/store:

  #+begin_src shell
  ls /gnu/store | tail -n 5
  #+end_src

** Hashes

   You'll notice the hashes. They are based on the build output and
   those various .dvr files you see.

   They are content-addressed hashes of an artifact's description
   (derivation) and build output.

   There is a lot more to say about hashes and drv files but they are
   quite implementation specific so I will refer you to the paper
   if you are interested.

** Liveness and the symlink zoo

   Artifacts in the heap are collected into a "profile".  One per user
   and one for the system.  Thus administering packages is not a
   priveleged activity.

   The final delivery of artifacts is accomplished by symlinking
   profiles to user directories. And defining some environment
   variables.


  The liveness model allows O(1) transactional upgrades and rollbacks.

** Distribution

  A functional package manager has the benefit of having a complete
  description of an artifact by the closure property and content
  addressing hashes in the heap.

  This enables a mixed distribution model:

  - Binary: the result of the evaluation of the package
    description. So if an artifact is available in some known trusted
    location (like a build farm) then it can be relocated across
    machines. The artifacts relocated from one system to another is
    called a substitute. (It /substitutes/ for a local "evaluation")


  - Source: The evaluation of a package description on a local
    machine.

* Guix

  [[http://guix.gnu.org/][GNU Guix]] - A GNU project that implements a functional package
  manager in Guile Scheme wherever possible.

  A few core design goals define Guix

** Hackability

*** Use a full programming language with existing libraries

    I do have to say I felt immediately comfortable using Guile.  That
    may be partly because of my particular preferences. I do think
    that scheme is very nice for functional programming (even if you
    are used to types).

**** A nice programming interface.

     Many real data types and records/structs (as opposed to using
     lists for everything).

     Unified api for describing artifacts.

     #+begin_src scheme :results output
     (use-modules (gnu packages haskell-check)
                  (gnu packages haskell-web)
                  (gnu packages haskell-xyz)
                  (guix build-system haskell)
                  (guix packages)
                  (guix download)
                  ((guix licenses) #:prefix license:))

     (define shellcheck-example
       (package
         (name "shellcheck")
         (version "0.7.0")
         (source
          (origin
            (method url-fetch)
            (uri (string-append
                  "https://hackage.haskell.org/package/ShellCheck/ShellCheck-"
                  version ".tar.gz"))
            (sha256
             (base32 "1vx895cp5k5h0680xfwj74lk97m9y627n965x6srds0gfnbkzy9s"))
            (file-name (string-append name "-" version ".tar.gz"))))
         (build-system haskell-build-system)
         (inputs
          `(("ghc-aeson" ,ghc-aeson)
            ("ghc-diff" ,ghc-diff)
            ("ghc-quickcheck" ,ghc-quickcheck)
            ("ghc-regex-tdfa" ,ghc-regex-tdfa)))
         (home-page "https://github.com/koalaman/shellcheck")
         (synopsis "Static analysis for shell scripts")
         (description "@code{shellcheck} provides static analysis for
     @command{bash} and @command{sh} shell scripts.
     It gives warnings and suggestions in order to:

     @enumerate
     @item Point out and clarify typical beginner's syntax issues that cause
     a shell to give cryptic error messages.
     @item Point out and clarify typical intermediate level semantic problems
     that cause a shell to behave strangely and counter-intuitively.
     @item Point out subtle caveats, corner cases and pitfalls that may cause an
     advanced user's otherwise working script to fail under future circumstances.
     @end enumerate")
         (license license:gpl3+)))

     (format #t "~A~%" shellcheck-example)
     #+end_src

**** Quotation and staging code for building

     The idea of quotation is really nice for package description.
     Package builds are described in quoted scheme. There is more,
     though. Sometimes evaluation needs to be delayed until build
     time. So there are G-Expressions - a library to talk about the
     store/heap and what to do with it.

     The following refers to something in the store. Nothing we can
     talk about locally.

     #+begin_src scheme
     (use-modules (guix gexp)
                  (gnu packages shells))
     (format #t "~A~%" #~(string-append #$fish "/bin/fish"))
     #+end_src

*** Some utilities to smooth out the hacking experience

    - guix repl - drop into a guile repl with the guix modules loaded

      #+begin_src shell
      guix repl
      #+end_src

    - guix edit - jump to the source of an artifact in ~$EDITOR~

      #+begin_src shell
      guix edit ghc
      #+end_src

    - guix import {crate,hackage,stackage,elpa} and more

      Implemented in scheme and part of the official cli.

*** Documentation

    Good documentation. Available locally and on the web.
    (Both Guile and Guix!)

    - [[https://guix.gnu.org/manual/en/][The Guix Manual]]

      #+begin_example
      info guix
      #+end_example

    - [[https://www.gnu.org/software/guile/manual/][The Guile Manual]]

      #+begin_example
      info guile
      #+end_example

** Bootstrapping

   Bootstrapping is a goal of many people in the project.

   - Rustc - bootstrapped from mrustc at rust version 19

   - [[https://www.gnu.org/software/mes/][GNU Mes]] - Created to reduce the binary seed in Guix (also to
     address trusting trust attacks)

   - GHC - An effort was made to bootstrap from HUGs, though ongoing

   - SML - A current effort ongoing to bootstrap NJ SML

** Reproducibility

   It is a strong desire to find and reduce non-determinism in
   artifact builds. This is hard though, and there is nothing stopping
   unreproducible descriptions from getting in.

   Tools for detection exist and determinism checking is a requirement
   for patches to be merged.

   #+begin_example
   guix build --rounds=N --check shellcheck-example
   #+end_example

** Free Software

   - No binary blobs whenever possible (deblobbed linux-libre kernel)

   - No proprietary licensing in official repo.

** Nice communities

   A "modern" GNU project, complete with code of conduct.

** Not strictly design goals, but other cool stuff going on

   - GNU Hurd support is an active area of work

   - High Performance Computing is quite actively supported

   - Forthcoming formal methods working group

** [[http://guix.gnu.org/contact/][Official communication channels]]

   - #guix on irc

   - active help, devel, and info mailing lists

   - issues and patches managed via debbugs
